"""
1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa
funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros
entre 1 y el n√∫mero que indique el usuario
"""
def calcular_factorial(numero):
  if numero == 0:
    return 1
  else:
    return numero * calcular_factorial(numero - 1)

numero_usuario = int(input("Ingresa un n√∫mero entero: "))
print(f"Factorial: {calcular_factorial(numero_usuario)}")

"""
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n
indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
especifique.
"""
asd = 0
def fibonacci(pos):
  if pos <= 0:
    return 0
  elif pos == 1:
    return 1
  else:
    return fibonacci(pos - 1) + fibonacci(pos - 2)

numero_usuario = int(input("Ingresa un n√∫mero entero: "))
for i in range(numero_usuario):
  print(f"Sucesion de fibonacci: {fibonacci(i)}")
print(f"Resultado funal de fibonacci: {fibonacci(numero_usuario)}")

"""
3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un
exponente, utilizando la f√≥rmula ùëõ^ùëö = ùëõ ‚àó ùëõ^(ùëö‚àí1). Prueba esta funci√≥n en un
algoritmo general.
"""
def calcular_potencia(base, exp):
  if exp == 0:
    return 1
  else:
    return base * calcular_potencia(base, exp - 1)

calcular_potencia(7, 5)

"""
4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base
decimal y devuelva su representaci√≥n en binario como una cadena de texto.
"""
def decimal_a_binario(num):
  if num == 0:
    return 0
  elif num == 1:
    return 1
  else:
    return str(decimal_a_binario(num // 2)) + str(num % 2)

decimal_a_binario(10)

"""
5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no
lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed().
"""
def es_palindromo(palabra):
  if len(palabra) <= 1:
    return True
  elif palabra[0] != palabra[-1]:
    return False
  else:
    return es_palindromo(palabra[1:-1])

es_palindromo("oso")

"""
6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4)
suma_digitos(9)      ‚Üí 9
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5)
"""
def suma_digitos(n):
  if (n < 10):
    return n
  else:
    return n % 10 + suma_digitos(n // 10)

suma_digitos(150)

"""
7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al
√∫ltimo nivel con un solo bloque.

Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la
pir√°mide.

Ejemplos:
contar_bloques(1)   ‚Üí 1         (1)
contar_bloques(2)   ‚Üí 3         (2 + 1)
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)
"""
def contar_bloques(n):
  if n == 0:
    return 0
  else:
    return n + contar_bloques(n - 1)

print(contar_bloques(4))

"""
8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces
aparece ese d√≠gito dentro del n√∫mero.
      Ejemplos:
contar_digito(12233421, 2)   ‚Üí 3
contar_digito(5555, 5)       ‚Üí 4
contar_digito(123456, 7)     ‚Üí 0
"""
def contar_digito(numero, digito, contador=0):
  if numero == 0:
    return contador
  else:
    if numero % 10 == digito:
      contador += 1
    return contar_digito(numero // 10, digito, contador)

print(f"Cantidad de veces que aparece: {contar_digito(5555, 5)}")